React + Redux:
    Setup do componente principal
        /*
        Importar o createStore do redux e o componente Provider do react-redux no
        componente pricipal (normalmente index.js) e engloba-lo com o Provider.
        Passando como parametro o store criada da função importada do redux 
        passando como parametro o reducer que também deverá ser importado.
        */

        import {createStore} from 'redux';
        import {Provider} from 'react-redux';
        import reducer from  './store/reducer';
        const store = createStore(reducer);

        ReactDOM.render(
            <Provider store={store} >
                <App />
            </Provider>,
            document.getElementById('root')
        );

    Usando em um Container
        /*
        Importar o connect do react-redux no Container o qual será conectado com
        a store.
        */

        import {connect} from 'react-redux';

        /*
        Criar duas funções, uma para pegar o estado da store e passar para a 
        props do compoenente. Outra para passar como props para o componente
        uma ou mais actions.
        */

        const mapStateToProps = state =>{
            return{
                ctr: state.counter
            };
        };
        
        /*
        Recebe state da store e passa para props do compoenente
        */


        const mapDispatchToProps = dispatch =>{
            return { 
                onIncrementCounter: () => dispatch({type: 'INCREMENT'})
            }
        };

        /*
        Cria actions e passa para a props do componente
        */

        export default connect(mapStateToProps, mapDispatchToProps)(Counter);

        /*
        conecta a store com o compoenente passando o estado e as actions como props
        connect retorna uma função de alta ordem
        */

        Immutable Update Patterns:
         http://redux.js.org/docs/recipes/reducers/ImmutableUpdatePatterns.html
    
    Combinando reducers
        No componente principal
            /*
            Onde foi criada a store, no caso, no componente principal. Importar
            alem do redux o combineReducers.
            Criar uma nova constante com o combineReducers passando um objeto como
            parametro, contendo todos os reducers importados
            */

            import {createStore, combineReducers} from 'redux';
            import counterReducer from  './store/reducers/counter';
            import resultsReducer from  './store/reducers/results';

            const rootReducer = combineReducers({
                ctr: counterReducer,
                res: resultsReducer
            });

            const store = createStore(rootReducer);
        
        No container onde será usado

            /*
            Passar retorno da função mapStateToProps.{nome no rootReducer}.{estado}:
            */

            const mapStateToProps = state =>{
                return {
                    ctr: state.ctr.counter,
                    storedResults: state.res.results
                };
            };

        Links Uteis
            Redux Docs: http://redux.js.org/
            Core Concepts: http://redux.js.org/docs/introduction/CoreConcepts.html
            Actions: http://redux.js.org/docs/basics/Actions.html
            Reducers: http://redux.js.org/docs/basics/Reducers.html
            Redux FAQs: http://redux.js.org/docs/FAQ.html

    Se o compoenente já tem uma HOC atrelado a ele:
        /*
        ao inveés de ...
        */

        export default withErrorHandler(Counter, axios);

        /*
        usar como parametro da funcção onde seria requerido o compoente...
        */

        export default withErrorHandler(
            connect(mapStateToProps, mapDispatchToProps)(Counter), axios
        );

    Adicionando um middleware ao redux
        O conceito de middleware é algum intermediário entre dois intervalos que
        excuta alguma ação ou impede que aconteca a próxima ação.

        /*
        Importar o applyMiddleware do redux;
        */

        import {createStore, combineReducers, applyMiddleware} from 'redux';

        /*
        Um exemplo de middleware:
        */

        const logger = store => {
            return next => {
                return action =>{
                    console.log('[Midddleware] Dispatching', action);
                    const result  = next(action);
                    console.log('[Midddleware] Next State', store.getState());
                    return result;
                }
            }
        };

        /*
        passar como parametro da função createStore o applyMiddleware com o parametro
        o middleware desejado:
        */

        const store = createStore(rootReducer, applyMiddleware(logger));

    Integrando o redux devTools com o redux
        /*
        Importar compose para jundar middlewares, assim como o combineReducer
        faz com os reducers
        porém será passado apenas como um fallback, pois usaremos o compose
        da extensão do chrome
        */

        import {createStore, combineReducers, applyMiddleware, compose} from 'redux';

        /*
        criar uma constante com o compose do redux devtools caso não tenha usar o compose
        padrão do redux;
        */

        const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;

        /*
        usar a nova constante como HOC de applyMiddleware:
        */

        const store = createStore(
            rootReducer,
            composeEnhancers(applyMiddleware(logger))
        );

    Integrando o Redux thunk
        /*
        Para retornar as actions como funções que podem ser despachadas a quando
        bem entender.
        */

        import thunk from 'redux-thunk';

        /*
        usar thunk como um novo middleware applyMiddleware:
        */

        const store = createStore(
            rootReducer,
            composeEnhancers(applyMiddleware(logger, thunk))
        );

    Action Creators
        /*
        São ações que retornam funções (retornadas pelo middleware do thunk) que
        permite que você despache ações quando quiser.
        aceita pegar o estado do componente com o metodo getState, porém
        não é muito recomendado seu uso
        */
        
        export const asyncStoreResult = result =>{
            return (dispatch, getState) => {
                setTimeout(()=>{
                    const oldCounter = getState().ctr.counter 
                    // usado no componente onde "ctr" é definido pelo mapStateToProps
                    dispatch(storeResult(result));
                }, 2000);
            }
        };